#!/bin/bash
set -eux

env | sort
pwd

# jupyter-offlinenotebook is automatically installed by repo2docker.
# Uninstall to avoid conflicts.
jupyter labextension uninstall --no-build jupyter-offlinenotebook

# Upgrade jupyterlab if necessary.
conda install jupyterlab=2

# Install necessaary kernel and debugger related dependency following 
# https://github.com/jupyterlab/debugger#installation, doing it in
# postBuild and not `environment.yml` to avoid breaking jupyter-offlinenotebook.
conda install -c zoq -c QuantStack -c conda-forge -c hi2p-perim xeus-cling mlpack xtensor=0.21.2 llvmdev=5 xeus-python=0.6.12 ptvsd git nodejs xwidgets=0.20.1 bqplot cmake xplot=0.15.0

# Install the debugger in postBuild and not `environment.yml` to 
# avoid breaking jupyter-offlinenotebook.
jupyter labextension install @jupyterlab/debugger
jupyter labextension install @jupyterlab/toc
jupyter labextension install @jupyter-widgets/jupyterlab-manager
jupyter labextension install bqplot
#jupyter labextension install @jupyter-widgets/jupyterlab-manager
#jupyter labextension install bqplot

# Add extra modules needed for examples.
python -m pip install pandas
python -m pip install numpy
python -m pip install seaborn

# repo2docker copies this repo into $HOME which means jupyter labextension
# picks up hidden dot files and runs into problems so install from a
# different directory.
SRCDIROFFLINE=/srv/conda/src/jupyter-offlinenotebook
mkdir -p "$SRCDIROFFLINE"

cd "$SRCDIROFFLINE"
git clone https://github.com/manics/jupyter-offlinenotebook.git .
python -m pip install .
jupyter labextension link --debug

SRCDIRXPLOT=/srv/conda/src/xplot
mkdir -p "$SRCDIRXPLOT"

cd "$SRCDIRXPLOT"
git clone https://github.com/zoq/xplot.git .
mkdir build
cd build
cmake -DCMAKE_INSTALL_PREFIX=/srv/conda/envs/notebook/ ..
make install

jupyter kernelspec remove -f xcpp11
jupyter kernelspec remove -f xcpp17

GOVERS=1.13.5

mkdir -p \
	$HOME/.local/go/$GOVERS \
	$HOME/go

curl -O -L https://golang.org/dl/go${GOVERS}.linux-amd64.tar.gz
tar -C $HOME/.local/go/$GOVERS -zxf go${GOVERS}.linux-amd64.tar.gz
/bin/rm go${GOVERS}.linux-amd64.tar.gz

export GOROOT=$HOME/.local/go/$GOVERS/go
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH

# Install go dependencies and packages.
go get golang.org/x/tools/cmd/goimports
go get github.com/gopherdata/gophernotes
go get gonum.org/v1/gonum/...
go get gonum.org/v1/plot/...

# Setup environment for Go.
cat >> $HOME/.setup-go << EOF
## setup Go
export GOROOT=$GOROOT
export GOPATH=$GOPATH
export PATH=\$GOPATH/bin:\$GOROOT/bin:\$PATH
EOF

cat >> $HOME/.bashrc << EOF
. ~/.setup-go
EOF

# Install the Go kernel.
mkdir -p ./binder/gophernotes
cat >| ./binder/gophernotes/kernel.json << EOF
{
    "argv": [
        "$GOPATH/bin/gophernotes",
        "{connection_file}"
    ],
    "display_name": "Go",
    "language": "go",
    "name": "go",
    "env" : {
        "CGO_CFLAGS": "-I/srv/conda/envs/notebook/include",
        "CFLAGS": "-I/srv/conda/envs/notebook/include",
        "CGO_LDFLAGS": "-L/srv/conda/envs/notebook/lib/",
        "LDFLAGS": "-L/srv/conda/envs/notebook/lib/"
    }
}
EOF
jupyter kernelspec install ./binder/gophernotes --user

go get -u -d mlpack.org/v1/mlpack
CGO_CFLAGS="-I/srv/conda/envs/notebook/include" CGO_LDFLAGS="-L/srv/conda/envs/notebook/lib/" go install -v mlpack.org/v1/mlpack

# Add mlpack dependencies to the main header.
rm /srv/conda/envs/notebook/include/mlpack/core.hpp
wget -O /srv/conda/envs/notebook/include/mlpack/core.hpp http://data.kurg.org/mlpack-core-binder.hpp

# Setup https://github.com/zoq/gym_tcp_api. 
wget -c https://github.com/zoq/gym_tcp_api/archive/master.tar.gz -O - | tar -xz
mkdir -p /srv/conda/envs/notebook/include/gym
cp -r gym_tcp_api-master/cpp/* /srv/conda/envs/notebook/include/gym/
rm -r gym_tcp_api-master
